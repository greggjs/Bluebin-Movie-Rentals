package form;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import movie.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserLogIn.java
 *
 * Created on Nov 19, 2012, 4:10:16 PM
 */

/**
 * Form where users can return movies rented and 
 * pay late fees.
 * 
 * Form by Patrick Cutno, Code by Jake Gregg
 * @author cutnop, greggjs
 */
public class Return extends javax.swing.JFrame {
    Main main;
    // for formatting money...
    NumberFormat nf = NumberFormat.getCurrencyInstance();
    // for the table...
    Object[][] data = null;
    String col[] = new String [] {
                "Title", "Rent Date", "Due Date", "Day(s) Late"
            };
    private DefaultTableModel model = new DefaultTableModel(data,col);
    /** Creates new  */
    public Return(Main main) {
        this.main = main;
        initComponents();
        jTable1.setRowSelectionAllowed(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setTitle("Return a Movie");
        setBounds(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width/2 - 200, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height/2-200, 0, 0);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 100, 123));
        jPanel1.setForeground(new java.awt.Color(0, 100, 123));
        jPanel1.setPreferredSize(new java.awt.Dimension(317, 300));

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Currently Rented by You");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton2.setBackground(new java.awt.Color(0, 100, 123));
        jButton2.setText("Cancel");
        jButton2.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jButton2ComponentAdded(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 100, 123));
        jButton3.setText("Return");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(model);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(233, 233, 233)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the instance of this frame and returns the user to
     * the User home page upon a window close
     * 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        main.returnFrame = null;
        main.loginUserFrame.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jButton2ComponentAdded
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton2ComponentAdded

    /**
     * Closes the window and returns to the User home screen.
     * 
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        main.returnFrame = null;
        main.loginUserFrame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Fills the table with all rentals of the User upon
     * window open.
     * 
     * @param evt 
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.fillTable();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Returns a selected movie and charges late fees if any.
     * 
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        returnMovie();
        data = null;
        model = new DefaultTableModel(data, col);
        jTable1.setModel(model);
        fillTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Fills the table with all the User's rentals.
     */
    public void fillTable() {
        
        // query to send to the database
        String bank = "select * from Has_Rented where "
                + "renter_phone=" + main.curr.getPhone()+";";
        
        // get the movies to display and store them as
        // a string array
        StringBuilder new_releases = getMovies(bank);
        String temp = new_releases.toString();
        String [] rel_arr = temp.split("~");
        
        // create some other arrays for filling in the table
        long[] late_arr = new long[rel_arr.length/4];
        int[] movie_arr = new int[rel_arr.length/4];
        String[] movie_title = new String[rel_arr.length/4];
        
        // get the movie ids of the rented movies
        int row = 0;
        bank = new String("select movie_name from "
                + "Movie where movie_id=");
        for (int i = 0; i < rel_arr.length-3; i+=4) {
            movie_arr[row] = Integer.parseInt(rel_arr[i+1]);
            row++;
        }
        
        // get all the movie names from the movie ids
        row = 0;
        for (int i = 0; i < movie_arr.length; i++) {
            movie_title[i] = getMovieName(bank, movie_arr[i]);
        }
        
       
        for (int i = 0; i < rel_arr.length-3; i+=4) {
            
            long due_day = 0, curr_day=0, days_late = 0;
            
            Date due=Date.valueOf(rel_arr[i+3]);
            due_day=due.getTime();
            
            curr_day=System.currentTimeMillis();
            // calculate each movie's late days
            days_late = curr_day-due_day;
            
            if (days_late > 0)
                late_arr[row] = days_late/86400000;
            else
                late_arr[row] = 0;
            
            // insert each movie into the table
            model.insertRow(row, new Object[]{movie_title[row],
                rel_arr[i+2], rel_arr[i+3], late_arr[row]});
            row++;
        }
        
    }
    /**
     * Returns a selected movie for the user, and charges them
     * a late fee if applicable.
     */
    public void returnMovie() {
        // get the movie to be returned. if none selected, return
        int row_selected = jTable1.getSelectedRow();
        if (row_selected == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select a movie to return");
            return;
        }  
        // get the title of the movie to remove
        String movie_title = jTable1.getModel().
                getValueAt(row_selected, 0).toString();
        // create a query for deletion
        String bank = new String("delete from Has_Rented "
                + "where renter_phone='"+main.curr.getPhone())
                +"' and movie_id=(select movie_id from Movie"
                + " where movie_name='"+movie_title+"');";
        // get the days late
        int late_days = Integer.parseInt(jTable1.
                getModel().getValueAt(row_selected, 3)
                .toString());
        // if the movie is late, charge the user a late fee, which
        // is $1.50 * 0.30 per day late. Do not let them return the 
        // movie if they decline to pay.
        if (late_days > 0) {
            double late_fee = 1.5+(late_days*.3);
            String disp = nf.format(late_fee);
            int choice = JOptionPane.showConfirmDialog(this,
                    "You have a late fee of "+disp+"\n"
                    + "Charge this to your credit card on file?",
                    "Late Fee Detected", JOptionPane.YES_NO_OPTION);
            if (choice == JOptionPane.NO_OPTION)
                return;
        }
        
        // if they pay, return the movie
        prepStm(bank);
        
        // increment the count of the movie stock.
        bank = "update Movie set quantity"
                + "=quantity+1 where movie_name"
                + "='"+movie_title+"';";
        
        prepStm(bank);
    }
    
    /**
     * Executes a prepared statement such as insertion, deletion,
     * and update.
     * 
     * @param bank query to be executed 
     */
    private void prepStm(String bank) {
        try {
            // create a connection
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3307/"
                    + "fall2012?user=greggjs&password=greggjs");
            // make a statement and execute it.
            PreparedStatement stm = conn.prepareStatement(bank);
            stm.execute();
        } catch (SQLException err) {
            System.out.println("problem has occurred");
            err.printStackTrace();
        } catch (ClassNotFoundException e) {
            System.out.println ("cannot find driver!");
        }
    }
    
    /**
     * Get all movies from a selection query.
     * 
     * @param bank query to be executed.
     * @return StringBuilder with results separated by "~" as
     * a delimiter.
     */
    public StringBuilder getMovies(String bank) {
        StringBuilder res = new StringBuilder("");
        
        try {
            // create a connection
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3307/"
                    + "fall2012?user=greggjs&password=greggjs");
            // make a statment to execute and result set.
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(bank);
            while(rs.next()) {
                // store each value sequentially
                res.append(rs.getString("renter_phone"));
                res.append("~");
                res.append(rs.getString("movie_id"));
                res.append("~");
                res.append(rs.getString("rent_date"));
                res.append("~");
                res.append(rs.getString("due_date"));
                res.append("~");
            }
          
        } catch (SQLException err) {
            System.out.println("problem has occurred");
        } catch (ClassNotFoundException e) {
            System.out.println ("cannot find driver!");
        }
        
        return res; // return the movies
    }
    
    /**
     * Get the movie name for a specific movie ID
     * 
     * @param bank query to be executed
     * @param id movie ID 
     * @return movie name for given movie ID
     */
    public String getMovieName(String bank, int id) {
        String movie = null; // result stored here
        try {
            // make connection
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                   "jdbc:mysql://localhost:3307/"
                   + "fall2012?user=greggjs&password=greggjs");
            // make statement and result set
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(bank+id+";");
            while(rs.next()) {
                movie = rs.getString("movie_name");
            }

        } catch (SQLException err) {
            System.out.println("problem has occurred");
        } catch (ClassNotFoundException e) {
            System.out.println ("cannot find driver!");
        }
        return movie; // return the movie name
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
