package form;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import movie.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserLogIn.java
 *
 * Created on Nov 19, 2012, 4:10:16 PM
 */

/**
 * Displays the results of an Advanced Search. Users
 * can either rent a movie from the query or cancel and
 * go back to the advanced search menu.
 * 
 * Form by Patrick Cunto, Code by Jake Gregg
 * @author cutnop
 */
public class SearchResults extends javax.swing.JFrame {
    Main main;
    // results are stored here
    StringBuilder res;
    // for the table...
    Object[][] data = null;
    String col[] = new String [] {
                "Title", "Release Date", "Rating", "Quantity"
            };
    DefaultTableModel model;
    /** Creates new  */
    public SearchResults(Main main, StringBuilder res) {
        this.main = main;
        this.res = res;
        model = new DefaultTableModel(data, col);
        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setTitle("Search Results");
        setBounds(java.awt.Toolkit.getDefaultToolkit().getScreenSize().width/2 - 200, java.awt.Toolkit.getDefaultToolkit().getScreenSize().height/2-200, 0, 0);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 100, 123));
        jPanel1.setForeground(new java.awt.Color(0, 100, 123));
        jPanel1.setPreferredSize(new java.awt.Dimension(317, 300));

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Results");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton2.setBackground(new java.awt.Color(0, 100, 123));
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 100, 123));
        jButton3.setText("Rent");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(model);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(233, 233, 233)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Rents a selected movie then returns to the Search window
     * 
     * @param evt 
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        rentMovie();
        
        data = null;
        model = new DefaultTableModel(data, col);
        jTable1.setModel(model);
        fillTable();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Clears out the results and opens the Advanced Search window
     * after the window is closed.
     * 
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        main.searchResultsFrame = null;
        main.searchFrame.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * Closes the Results window and opens up the Advanced Search
     * window.
     * 
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        main.searchResultsFrame = null;
        main.searchFrame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Fills the table with the results upon the form opening.
     * 
     * @param evt 
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        fillTable();
    }//GEN-LAST:event_formWindowOpened

    /**
     * Fills the table with the results of the Advanced
     * Search query.
     */
    public void fillTable() {
        // stores the query results in a string array
        String res_s = res.toString();
        String [] rel_arr = res_s.split("~");
        int row = 0;
        // adds each to the table to be displayed.
        for (int i = 0; i < rel_arr.length-3; i+=4) {
            model.insertRow(row, new Object[]{rel_arr[i],
                rel_arr[i+1], rel_arr[i+2], rel_arr[i+3]});
            row++;
        }
    }

    /**
     * Rents a selected movie from the table and returns 
     * the User to the Advanced Search window. Does not
     * let the user rent a movie with no movies in stock.
     */
    public void rentMovie() {
        
        // get the selected movie. if nothing is 
        // selected, then return.
        int row_selected = jTable1.getSelectedRow();
        if (row_selected == -1) {
            JOptionPane.showMessageDialog(this,
                    "Please select a movie to rent");
            return;
        }
        
        // checks if there are any movies to rent. if not, 
        // return.
        int quantity = Integer.parseInt(
                (String)(jTable1.getModel()
                .getValueAt(row_selected, 3)));
        
        if (quantity == 0) {
            JOptionPane.showMessageDialog(this, "Out of Stock");
            return;
        }
        
        // get the movie id of the movie selected from the
        // given movie title.
        String movie_title = jTable1.getModel()
                .getValueAt(row_selected, 0).toString();
        String movie_q = "select movie_id from"
                + " Movie where movie_name='"+movie_title+"'";
        String movie_id = null;
        movie_id = selectStm(movie_q, "movie_id");
        
        // Check and see if the movie was already rented by
        // the user. if it was, do not let them rent it.
        String bank = "select renter_phone from "
                + "Has_Rented where movie_id = "
                +movie_id+" and renter_phone = '"
                +main.curr.getPhone()
                +"';";
        String test = selectStm(bank, "renter_phone");
        if (main.curr.getPhone().equals(test)) { // check if rented
            JOptionPane.showMessageDialog(this, "You already"
                    + " have this movie rented out...");
            return;
        }
        
        // ask the user if they would like to charge their card on
        // file, like asking if they're sure they want this one.
        // if not, return.
        int choice = JOptionPane.showConfirmDialog(this, 
                "Charge $3.00 to your credit card on file for this"
                + " rental?",
                "Rent New Release", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.NO_OPTION)
            return;
        
        // calculate the rental date and the due date
        // in miliseconds
        Long curr_time = System.currentTimeMillis();
        Long seven_days = (long)604800000;
        Long due_time = curr_time+seven_days;
        
        // generate SQL Dates for insert
        Date curr_date = new Date(curr_time);
        Date due_date = new Date(due_time);
        
        // insert rental into Has_Rented for records
        bank = "insert into Has_Rented values('"
                +main.curr.getPhone()+"', "+movie_id
                +", '"+curr_date+"','"+due_date+"');";
        prepStm(bank);
        
        // update quantity of movie.
        bank = "update Movie set quantity "
                + "= quantity-1 where movie_id="+movie_id+";";
        prepStm(bank);
        
        // return the user to the Advanced Search frame.
        this.setVisible(false);
        main.searchResultsFrame = null;
        main.searchFrame.setVisible(true);
    }
    
    /**
     * Executes a prepared SQL statement in the database, such
     * as an insertion, update, or deletion.
     * 
     * @param bank query to be executed
     */
    public void prepStm(String bank) {
        try {
            // connect to database
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3307/fall2012"
                    + "?user=greggjs&password=greggjs");
            // make the statement and execute.
            PreparedStatement stm = conn.prepareStatement(bank);
            stm.execute();
        } catch (SQLException err) {
            System.out.println("problem has occurred");
        } catch (ClassNotFoundException e) {
            System.out.println ("cannot find driver!");
        }
    }
    
    /**
     * Executes a SQL statement in the database and returns 
     * a result set from selection queries as a String.
     * 
     * @param bank query to be executed
     * @param type item to be returned from result set
     * @return result as a String
     */
    public String selectStm(String bank, String type) {
        String res = null; // returned string variable
        try {
            // create connection
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3307/"
                    + "fall2012?user=greggjs&password=greggjs");
            // make a statment and result set to store query and
            // results.
            Statement stm = conn.createStatement();
            ResultSet rs = stm.executeQuery(bank);
            while(rs.next()) {
                res = rs.getString(type);
            }

        } catch (SQLException err) {
            System.out.println("problem has occurred");
        } catch (ClassNotFoundException e) {
            System.out.println ("cannot find driver!");
        }
        return res; // return results as String.
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
